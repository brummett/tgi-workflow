#!/usr/bin/env perl

#
# This is testing a reported bug in converge, which stated that you
# can't output a converge step into an is_many property downstream.
#

BEGIN {
    $ENV{UR_DBI_NO_COMMIT}=1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS}=1;
}

use strict;
use warnings;

use Test::More tests => 28;

use_ok('Workflow');

my $w = Workflow::Model->create(
    name => 'ctest',
    input_properties => [ qw/size1 size2 size3 color1 color2 color3 shape1 shape2 shape3/ ],
    output_properties => [ qw/size color shape result/ ]
);
ok($w, 'create workflow');

my $wid1 = $w->add_operation(
    name => 'wid1',
    operation_type => Workflow::OperationType::Command->get('Workflow::Test::Command::WidgetMaker')
);
ok($wid1,'add wid1');

my $wid2 = $w->add_operation(
    name => 'wid2',
    operation_type => Workflow::OperationType::Command->get('Workflow::Test::Command::WidgetMaker')
);
ok($wid2,'add wid2');

my $wid3 = $w->add_operation(
    name => 'wid3',
    operation_type => Workflow::OperationType::Command->get('Workflow::Test::Command::WidgetMaker')
);
ok($wid3,'add wid3');

my $converge = $w->add_operation(
    name => 'conv',
    operation_type => Workflow::OperationType::Converge->create(
        input_properties => [qw/widget1 widget2 widget3/],
        output_properties => ['widgets']
    )
);
ok($converge,'add conv');

my $reader = $w->add_operation(
    name => 'reader',
    operation_type => Workflow::OperationType::Command->get('Workflow::Test::Command::WidgetManyReader')
);
ok($reader,'add reader');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'size1',
    right_operation => $wid1,
    right_property => 'size'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'size2',
    right_operation => $wid2,
    right_property => 'size'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'size3',
    right_operation => $wid3,
    right_property => 'size'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'color1',
    right_operation => $wid1,
    right_property => 'color'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'color2',
    right_operation => $wid2,
    right_property => 'color'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'color3',
    right_operation => $wid3,
    right_property => 'color'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'shape1',
    right_operation => $wid1,
    right_property => 'shape'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'shape2',
    right_operation => $wid2,
    right_property => 'shape'
),'link');

ok($w->add_link(
    left_operation => $w->get_input_connector,
    left_property => 'shape3',
    right_operation => $wid3,
    right_property => 'shape'
),'link');

ok($w->add_link(
    left_operation => $wid1,
    left_property => 'widget',
    right_operation => $converge,
    right_property => 'widget1'
),'link');

ok($w->add_link(
    left_operation => $wid2,
    left_property => 'widget',
    right_operation => $converge,
    right_property => 'widget2'
),'link');

ok($w->add_link(
    left_operation => $wid3,
    left_property => 'widget',
    right_operation => $converge,
    right_property => 'widget3'
),'link');

ok($w->add_link(
    left_operation => $converge,
    left_property => 'widgets',
    right_operation => $reader,
    right_property => 'widget'
),'link');

foreach my $prop (qw/shape color size result/) {
    ok($w->add_link(
        left_operation => $reader,
        left_property => $prop,
        right_operation => $w->get_output_connector,
        right_property => $prop
    ),'link');
}

ok(do {
    $w->validate;
    $w->is_valid;
}, 'validate');

my $output;
ok($w->execute(
    input => {
        size1 => 'little',
        color1 => 'yellow',
        shape1 => 'different',
        size2 => 'large',
        color2 => 'green',
        shape2 => 'man',
        size3 => 'hulk',
        color3 => 'angry',
        shape3 => 'now'
    },
    output_cb => sub {
        $output = shift->output;
    }
), 'execute workflow');

ok($w->wait,'wait');

is_deeply(
    $output,
    {
        size => [qw/little large hulk/],
        color => [qw/yellow green angry/],
        shape => [qw/different man now/],
        result => 1
    },
    'check output'
);
