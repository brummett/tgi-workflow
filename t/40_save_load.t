#!/usr/bin/env perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS}=1;
}

use strict;
use warnings;

use UR;
use Test::More skip_all => 'reverse all changes removes observers which prevents object from loading properly', tests => 18;
use Devel::Size qw(size total_size);
use File::Basename;

use above 'Cord';

#my $dir = -d 't/xml.d' ? 't/xml.d' : 'xml.d';

my $dir = File::Basename::dirname(__FILE__). '/xml.d';

my $id;

require_ok('Cord::Model');
can_ok('Cord::Model',qw/create validate is_valid execute/);

{
    my $w = Cord::Model->create_from_xml($dir . '/00_basic.xml');
    ok($w,'create workflow');

    ok(do {
        $w->validate;
        $w->is_valid;
    },'validate');

    my $collector = sub {
        my ($data) = @_;

#        diag(ref($data) . ' ' . $data->id);

        $id = $data->id;

        ok(defined $data->input,'input defined');
        ok(ref($data->input) eq 'HASH','input is hash');
        ok(defined $data->output,'output defined');
        ok(ref($data->output) eq 'HASH','output is hash');

        # just let it leave scope
    };

    ok($w->execute(
        input => {
            'model input string' => 'abracadabra321',
            'sleep time' => 1
        },
        output_cb => $collector
    ),'execute');

    ok($w->wait,'wait');

    $DB::single=1;

    ok(UR::Context->commit,'commit');
    
    $w->delete;
}

$DB::single=1;

foreach my $ds (UR::Context->all_objects_loaded('UR::DataSource')) {
    $ds->_set_all_objects_saved_committed;
}

UR::Context->_reverse_all_changes();
UR::Context->clear_cache;

my $pass = 1;
foreach my $o (UR::Context->all_objects_loaded('UR::Object')) {
    my @c = $o->inheritance();
    unshift @c, $o->class;
    pop @c if ($c[-1] eq 'UR::ModuleBase');
    pop @c if ($c[-1] eq 'UR::Object');
    
    unless (grep(/^UR::/, @c)) {
#        diag(ref($o) . ' ' . $o->id);
        unless (ref($o) eq 'Cord::OperationType::Command') {
            $pass = 0;
        }
    }
}
ok($pass,'cleared workflow objects');

my $normal = Cord::Operation::Instance->get($id);

ok($normal,'loaded instance');
ok(my @array = $normal->child_instances,'has children');
ok(defined $normal->input,'input defined');
ok(ref($normal->input) eq 'HASH','input is hash');
ok(defined $normal->output,'output defined');
ok(ref($normal->output) eq 'HASH','output is hash');

#$DB::single=1;
#$normal->treeview_debug;

